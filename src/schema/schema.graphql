type Query {
  hello: String!
  users(query: String): [User]!
  loginUser(data: LoginUserInput): Token
  findUserById(id: ID!): User
}

type Mutation {
  createUser(data: CreatUserInput): User!
  updateUser(data: UpdateUserInput): User!
  deleteUser(id: ID!): Message!
}

# USER Type
type User {
  id: ID!
  username: String!
  role: UserRole
}

type Token {
  token: String
}

input CreatUserInput {
  username: String!
  password: String!
  role: String
}

input UpdateUserInput {
  id: ID!
  username: String
  password: String
  role: String
}

input LoginUserInput {
  username: String!
  password: String!
}

enum UserRole {
  USER
  ADMIN
}

# EMPLOYEE Type
type Employee {
  id: ID!
  employeeId: Int
  firstName: String!
  lastName: String!
  position: String!
}

input CreatEmplyeeInput {
  employeeId: Int!
  firstName: String!
  lastName: String!
  position: String!
}

input UpdateEmplyeeInput {
  employeeId: Int
  firstName: String
  lastName: String
  position: String
}

# SHIFT Type
type Shift {
  day: String!
  employees: [User]!
}

#  Message Type
type Message {
  message: String!
}
